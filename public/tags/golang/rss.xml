<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on 呦呦鹿鸣</title><link>//localhost:1313/tags/golang/</link><description>Recent content in Golang on 呦呦鹿鸣</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 04 Dec 2022 20:00:20 +0800</lastBuildDate><atom:link href="//localhost:1313/tags/golang/rss.xml" rel="self" type="application/rss+xml"/><item><title>用Golang实现一个消息队列</title><link>//localhost:1313/post/golang/implement-queue/</link><pubDate>Sun, 04 Dec 2022 20:00:20 +0800</pubDate><guid>//localhost:1313/post/golang/implement-queue/</guid><description>&lt;p>Go的&lt;code>channel&lt;/code>是并发编程中的一种同步通信机制，天然支持并发请求，因此可以用来实现消息队列。这里实现一个能够处理并发请求的消息队列。&lt;/p>
&lt;h3 id="一设计消息队列的基本结构">一、设计消息队列的基本结构
&lt;a class="header-anchor" href="#%e4%b8%80%e8%ae%be%e8%ae%a1%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%93%e6%9e%84">&lt;/a>
&lt;/h3>&lt;p>定义一个&lt;code>Message&lt;/code>结构体来存储消息的ID和负载，一个&lt;code>Queue&lt;/code>结构体来管理消息队列。&lt;/p></description></item><item><title>Go的定时器之Time.Ticker</title><link>//localhost:1313/post/golang/time-ticker/</link><pubDate>Fri, 22 Apr 2022 22:47:20 +0800</pubDate><guid>//localhost:1313/post/golang/time-ticker/</guid><description>&lt;h3 id="一引子">一、引子
&lt;a class="header-anchor" href="#%e4%b8%80%e5%bc%95%e5%ad%90">&lt;/a>
&lt;/h3>&lt;p>面试官问了一道题：每秒钟调用一次proc并保证程序不退出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">proc&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;ok&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这道题考察的知识点主要有：&lt;/p>
&lt;ol>
&lt;li>定时执行任务&lt;/li>
&lt;li>捕获 &lt;code>panic&lt;/code> 错误&lt;/li>
&lt;/ol>
&lt;p>这里主要学习、了解 &lt;code>Time.Ticker&lt;/code> 的实现，其源代码基于 &lt;code>Go 1.17.9&lt;/code> 版本，主要在 &lt;code>src/time/tick.go&lt;/code> 文件中，包含了一个结构体和四个函数。&lt;/p></description></item><item><title>Go的WaitGroup源码分析</title><link>//localhost:1313/post/golang/waitgroup-sourcecode/</link><pubDate>Fri, 01 Apr 2022 09:00:20 +0800</pubDate><guid>//localhost:1313/post/golang/waitgroup-sourcecode/</guid><description>&lt;p>&lt;code>WaitGroup&lt;/code> 是开发中经常用到的并发控制手段，其源代码在 &lt;code>src/sync/waitgroup.go&lt;/code> 文件中，定义了 1 个结构体和 4 个方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>WaitGroup{}&lt;/code>&lt;/strong>：结构体。&lt;/li>
&lt;li>&lt;strong>&lt;code>state()&lt;/code>&lt;/strong>：内部方法，在 &lt;code>Add()&lt;/code>、&lt;code>Wait()&lt;/code> 中调用。&lt;/li>
&lt;li>&lt;strong>&lt;code>Add()&lt;/code>&lt;/strong>：添加任务数、改变任务数。&lt;/li>
&lt;li>&lt;strong>&lt;code>Done()&lt;/code>&lt;/strong>：完成任务，其实就是 &lt;code>Add(-1)&lt;/code>。&lt;/li>
&lt;li>&lt;strong>&lt;code>Wait()&lt;/code>&lt;/strong>：阻塞等待所有任务的完成。&lt;/li>
&lt;/ul>
&lt;p>以下源代码基于 &lt;code>Go 1.17.5&lt;/code> 版本，有删减。&lt;/p></description></item><item><title>Go的Select的用法</title><link>//localhost:1313/post/golang/select/</link><pubDate>Sun, 10 Oct 2021 23:52:00 +0800</pubDate><guid>//localhost:1313/post/golang/select/</guid><description>&lt;p>Go 的通道有两种操作方式，一种是带 range 子句的 for 语句，另一种则是 select 语句，它是专门为了操作通道而存在的。这里主要介绍 select 的用法。&lt;/p>
&lt;h5 id="一select的语法">一、select的语法
&lt;a class="header-anchor" href="#%e4%b8%80select%e7%9a%84%e8%af%ad%e6%b3%95">&lt;/a>
&lt;/h5>&lt;p>select 语句的语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ch1&lt;/span> :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">statement&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">ch2&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">statement&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span> : &lt;span style="color:#75715e">/* 可选 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">statement&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里要注意：&lt;/p></description></item><item><title>Go的Channel发送和接收</title><link>//localhost:1313/post/golang/channel/</link><pubDate>Tue, 24 Aug 2021 01:46:00 +0800</pubDate><guid>//localhost:1313/post/golang/channel/</guid><description>&lt;p>先来看一道面试题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>对已经关闭的 chan 进行读写，会怎么样？为什么？
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上一篇学习 Go 协程的文章中，知道 go 关键字可以用来开启一个 goroutine 进行任务处理，但多个任务之间如果需要通信，就需要用到通道（channel）了。&lt;/p></description></item><item><title>Go的Waitgroup和锁</title><link>//localhost:1313/post/golang/waitgroup/</link><pubDate>Tue, 18 May 2021 00:13:00 +0800</pubDate><guid>//localhost:1313/post/golang/waitgroup/</guid><description>&lt;p>学 Go 的时候知道 Go 语言支持并发，最简单的方法是通过 go 关键字开启 goroutine 即可。可在工作中，用的是 sync 包的 WaitGroup，然而这样还不够，当多个 goroutine 同时访问一个变量时，还要考虑如何保证这些 goroutine 之间不会相互影响，这就又使用到了 sync 的 Mutex。&lt;/p></description></item></channel></rss>