<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 呦呦鹿鸣</title>
    <link>//localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on 呦呦鹿鸣</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 09 Jan 2023 00:13:00 +0800</lastBuildDate>
    <atom:link href="//localhost:1313/tags/golang/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go的弱引用</title>
      <link>//localhost:1313/post/golang/weak-reference/</link>
      <pubDate>Mon, 09 Jan 2023 00:13:00 +0800</pubDate>
      <guid>//localhost:1313/post/golang/weak-reference/</guid>
      <description>&lt;p&gt;在学习观察者模式的时候，看到观察者模式的实现方式之一有弱引用，所以专门学习了一下这个知识点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用Golang实现一个消息队列</title>
      <link>//localhost:1313/post/golang/implement-queue/</link>
      <pubDate>Sun, 04 Dec 2022 20:00:20 +0800</pubDate>
      <guid>//localhost:1313/post/golang/implement-queue/</guid>
      <description>&lt;p&gt;Go的&lt;code&gt;channel&lt;/code&gt;是并发编程中的一种同步通信机制，天然支持并发请求，因此可以用来实现消息队列。这里实现一个能够处理并发请求的消息队列。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go的定时器之Time.Ticker</title>
      <link>//localhost:1313/post/golang/time-ticker/</link>
      <pubDate>Fri, 22 Apr 2022 22:47:20 +0800</pubDate>
      <guid>//localhost:1313/post/golang/time-ticker/</guid>
      <description>&lt;h3 id=&#34;一引子&#34;&gt;一、引子&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%b8%80%e5%bc%95%e5%ad%90&#34;&gt;&lt;/a&gt;&#xA;&lt;/h3&gt;&lt;p&gt;面试官问了一道题：每秒钟调用一次proc并保证程序不退出。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proc&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这道题考察的知识点主要有：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;定时执行任务&lt;/li&gt;&#xA;&lt;li&gt;捕获 &lt;code&gt;panic&lt;/code&gt; 错误&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这里主要学习、了解 &lt;code&gt;Time.Ticker&lt;/code&gt; 的实现，其源代码基于 &lt;code&gt;Go 1.17.9&lt;/code&gt; 版本，主要在 &lt;code&gt;src/time/tick.go&lt;/code&gt; 文件中，包含了一个结构体和四个函数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go的WaitGroup源码分析</title>
      <link>//localhost:1313/post/golang/waitgroup-sourcecode/</link>
      <pubDate>Fri, 01 Apr 2022 09:00:20 +0800</pubDate>
      <guid>//localhost:1313/post/golang/waitgroup-sourcecode/</guid>
      <description>&lt;p&gt;&lt;code&gt;WaitGroup&lt;/code&gt; 是开发中经常用到的并发控制手段，其源代码在 &lt;code&gt;src/sync/waitgroup.go&lt;/code&gt; 文件中，定义了 1 个结构体和 4 个方法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;WaitGroup{}&lt;/code&gt;&lt;/strong&gt;：结构体。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;state()&lt;/code&gt;&lt;/strong&gt;：内部方法，在 &lt;code&gt;Add()&lt;/code&gt;、&lt;code&gt;Wait()&lt;/code&gt; 中调用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;Add()&lt;/code&gt;&lt;/strong&gt;：添加任务数、改变任务数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;Done()&lt;/code&gt;&lt;/strong&gt;：完成任务，其实就是 &lt;code&gt;Add(-1)&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;Wait()&lt;/code&gt;&lt;/strong&gt;：阻塞等待所有任务的完成。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以下源代码基于 &lt;code&gt;Go 1.17.5&lt;/code&gt; 版本，有删减。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go的Select的用法</title>
      <link>//localhost:1313/post/golang/select/</link>
      <pubDate>Sun, 10 Oct 2021 23:52:00 +0800</pubDate>
      <guid>//localhost:1313/post/golang/select/</guid>
      <description>&lt;p&gt;Go 的通道有两种操作方式，一种是带 range 子句的 for 语句，另一种则是 select 语句，它是专门为了操作通道而存在的。这里主要介绍 select 的用法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go的Channel发送和接收</title>
      <link>//localhost:1313/post/golang/channel/</link>
      <pubDate>Tue, 24 Aug 2021 01:46:00 +0800</pubDate>
      <guid>//localhost:1313/post/golang/channel/</guid>
      <description>&lt;p&gt;先来看一道面试题：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;对已经关闭的 chan 进行读写，会怎么样？为什么？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上一篇学习 Go 协程的文章中，知道 go 关键字可以用来开启一个 goroutine 进行任务处理，但多个任务之间如果需要通信，就需要用到通道（channel）了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go的Waitgroup和锁</title>
      <link>//localhost:1313/post/golang/waitgroup/</link>
      <pubDate>Tue, 18 May 2021 00:13:00 +0800</pubDate>
      <guid>//localhost:1313/post/golang/waitgroup/</guid>
      <description>&lt;p&gt;学 Go 的时候知道 Go 语言支持并发，最简单的方法是通过 go 关键字开启 goroutine 即可。可在工作中，用的是 sync 包的 WaitGroup，然而这样还不够，当多个 goroutine 同时访问一个变量时，还要考虑如何保证这些 goroutine 之间不会相互影响，这就又使用到了 sync 的 Mutex。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
