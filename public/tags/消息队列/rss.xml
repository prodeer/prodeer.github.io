<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>消息队列 on 呦呦鹿鸣</title><link>//localhost:1313/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><description>Recent content in 消息队列 on 呦呦鹿鸣</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Fri, 17 Feb 2023 21:20:10 +0800</lastBuildDate><atom:link href="//localhost:1313/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/rss.xml" rel="self" type="application/rss+xml"/><item><title>Golang实现一个基于本地存储的延时队列</title><link>//localhost:1313/post/mq/delayed-queue/</link><pubDate>Fri, 17 Feb 2023 21:20:10 +0800</pubDate><guid>//localhost:1313/post/mq/delayed-queue/</guid><description>&lt;h2 id="一什么是延迟队列">一、什么是延迟队列
&lt;a class="header-anchor" href="#%e4%b8%80%e4%bb%80%e4%b9%88%e6%98%af%e5%bb%b6%e8%bf%9f%e9%98%9f%e5%88%97">&lt;/a>
&lt;/h2>&lt;p>延迟队列是一种特殊的队列，其核心特点是队列中的消息或任务会被延迟一定时间后才能被消费或执行。这种队列广泛应用于需要延迟处理的场景，比如订单超时未支付自动取消、用户注册后一段时间未登录发送提醒等。&lt;/p></description></item><item><title>认识MQTT（二）：RabbitMQ支持MQTT</title><link>//localhost:1313/post/mq/rabbitmq-support-mqtt/</link><pubDate>Thu, 15 Dec 2022 16:00:20 +0800</pubDate><guid>//localhost:1313/post/mq/rabbitmq-support-mqtt/</guid><description>&lt;p>&lt;code>RabbitMQ&lt;/code>是通过插件的形式支持&lt;code>MQTT&lt;/code>协议的，使用时，需要在RabbitMQ集群上启用&lt;code>rabbitmq_mqtt&lt;/code>插件。&lt;/p></description></item><item><title>认识MQTT（一）：MQTT是什么</title><link>//localhost:1313/post/mq/mqtt-introduction/</link><pubDate>Wed, 07 Dec 2022 21:00:20 +0800</pubDate><guid>//localhost:1313/post/mq/mqtt-introduction/</guid><description>&lt;p>和车打交道后，接触到了&lt;code>MQTT&lt;/code>，第一次听到这个词时，我还疑心自己是不是听错了，问Leader是不是&lt;code>MQ&lt;/code>，得到了“不是”的答复，遂有此文，总结一下我所了解的&lt;code>MQTT&lt;/code>。&lt;/p></description></item><item><title>用Golang实现一个消息队列</title><link>//localhost:1313/post/golang/implement-queue/</link><pubDate>Sun, 04 Dec 2022 20:00:20 +0800</pubDate><guid>//localhost:1313/post/golang/implement-queue/</guid><description>&lt;p>Go的&lt;code>channel&lt;/code>是并发编程中的一种同步通信机制，天然支持并发请求，因此可以用来实现消息队列。这里实现一个能够处理并发请求的消息队列。&lt;/p></description></item></channel></rss>