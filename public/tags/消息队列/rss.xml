<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>消息队列 on 呦呦鹿鸣</title><link>//localhost:1313/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><description>Recent content in 消息队列 on 呦呦鹿鸣</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 15 Dec 2022 16:00:20 +0800</lastBuildDate><atom:link href="//localhost:1313/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/rss.xml" rel="self" type="application/rss+xml"/><item><title>认识MQTT（二）：RabbitMQ支持MQTT</title><link>//localhost:1313/post/mq/rabbitmq-support-mqtt/</link><pubDate>Thu, 15 Dec 2022 16:00:20 +0800</pubDate><guid>//localhost:1313/post/mq/rabbitmq-support-mqtt/</guid><description>&lt;p>&lt;code>RabbitMQ&lt;/code>是通过插件的形式支持&lt;code>MQTT&lt;/code>协议的，使用时，需要在RabbitMQ集群上启用&lt;code>rabbitmq_mqtt&lt;/code>插件。&lt;/p>
&lt;h2 id="一如何配置rabbitmq以支持mqtt的qos级别">一、如何配置RabbitMQ以支持MQTT的QoS级别
&lt;a class="header-anchor" href="#%e4%b8%80%e5%a6%82%e4%bd%95%e9%85%8d%e7%bd%aerabbitmq%e4%bb%a5%e6%94%af%e6%8c%81mqtt%e7%9a%84qos%e7%ba%a7%e5%88%ab">&lt;/a>
&lt;/h2>&lt;p>&lt;code>MQTT&lt;/code> QoS级别在&lt;code>RabbitMQ&lt;/code>中不需要特别的配置，因为&lt;code>rabbitmq_mqtt&lt;/code>插件会自动处理QoS级别。&lt;code>MQTT&lt;/code>客户端在发布消息时指定QoS级别，&lt;code>RabbitMQ&lt;/code>会根据这个级别处理消息。&lt;/p></description></item><item><title>认识MQTT（一）：MQTT是什么</title><link>//localhost:1313/post/mq/mqtt-introduction/</link><pubDate>Wed, 07 Dec 2022 21:00:20 +0800</pubDate><guid>//localhost:1313/post/mq/mqtt-introduction/</guid><description>&lt;p>和车打交道后，接触到了&lt;code>MQTT&lt;/code>，第一次听到这个词时，我还疑心自己是不是听错了，问Leader是不是&lt;code>MQ&lt;/code>，得到了“不是”的答复，遂有此文，总结一下我所了解的&lt;code>MQTT&lt;/code>。&lt;/p></description></item><item><title>用Golang实现一个消息队列</title><link>//localhost:1313/post/golang/implement-queue/</link><pubDate>Sun, 04 Dec 2022 20:00:20 +0800</pubDate><guid>//localhost:1313/post/golang/implement-queue/</guid><description>&lt;p>Go的&lt;code>channel&lt;/code>是并发编程中的一种同步通信机制，天然支持并发请求，因此可以用来实现消息队列。这里实现一个能够处理并发请求的消息队列。&lt;/p>
&lt;h3 id="一设计消息队列的基本结构">一、设计消息队列的基本结构
&lt;a class="header-anchor" href="#%e4%b8%80%e8%ae%be%e8%ae%a1%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%93%e6%9e%84">&lt;/a>
&lt;/h3>&lt;p>定义一个&lt;code>Message&lt;/code>结构体来存储消息的ID和负载，一个&lt;code>Queue&lt;/code>结构体来管理消息队列。&lt;/p></description></item></channel></rss>