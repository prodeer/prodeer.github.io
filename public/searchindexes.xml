<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>关于我</title><url>/about/</url><categories/><tags/><content type="html">  2015 年毕业后一直从事后端开发工作， 写过 PHP，会一点 Java，现今主要从事 Golang 开发，目标是一个又一个的十年之约。
先后就业于教育、出行、车联网行业，世界在变，我们也要变，跟上节奏，一起向前。
每一次挑战，都是成长的机会。我期待在不断变化的世界中，对技术的热爱与追求永远不变。
  </content></entry><entry><title>用Golang实现一个消息队列</title><url>/post/golang/implement-queue/</url><categories><category>Golang</category></categories><tags><tag>Golang</tag><tag>消息队列</tag></tags><content type="html"><![CDATA[  Go的channel是并发编程中的一种同步通信机制，天然支持并发请求，因此可以用来实现消息队列。这里实现一个能够处理并发请求的消息队列。
一、设计消息队列的基本结构 定义一个Message结构体来存储消息的ID和负载，一个Queue结构体来管理消息队列。
type Message struct { ID string Payload interface{} } type Queue struct { messages []Message mutex sync.Mutex cond *sync.Cond } func NewQueue() *Queue { q := &amp;Queue{} q.cond = sync.NewCond(&amp;q.mutex) return q } 二、实现生产者和消费者 生产者负责生成消息并将其添加到队列中，消费者从队列中读取消息并进行处理。为了确保线程安全和条件等待，可以使用sync.Mutex和sync.Cond。
func (q *Queue) Produce(msg Message) { q.mutex.Lock() defer q.mutex.Unlock() q.messages = append(q.messages, msg) q.cond.Signal() } func (q *Queue) Consume() Message { q.mutex.Lock() defer q.mutex.Unlock() for len(q.messages) == 0 { q.cond.Wait() } msg := q.messages[0] q.messages = q.messages[1:] return msg } 三、并发处理 使用goroutine可以实现并发生产和消费，用来模拟生产者和消费者的行为。
func main() { queue := NewQueue() // 生产者Goroutine go func() { for i := 0; i &lt; 10; i++ { msg := Message{ID: fmt.Sprintf(&#34;msg-%d&#34;, i), Payload: fmt.Sprintf(&#34;Data %d&#34;, i)} queue.Produce(msg) fmt.Printf(&#34;Produced: %v\n&#34;, msg) time.Sleep(time.Second) } }() // 消费者Goroutine go func() { for { msg := queue.Consume() fmt.Printf(&#34;Consumed: %v\n&#34;, msg) time.Sleep(time.Second * 2) } }() // 防止主程序退出 select {} } 四、持久化存储 将消息存储在磁盘或数据库中，防止系统崩溃导致数据丢失。
将消息写入到一个日志文件中，这样即使程序重启，消息也不会丢失。 在数据库中创建一个表来存储消息，并在消息处理失败时将消息插入到这个表中。   ]]></content></entry><entry><title>单例模式（Singleton Pattern）</title><url>/post/desiginpattern/singleton-pattern/</url><categories><category>设计模式</category></categories><tags/><content type="html">  单例模式（Singleton Pattern）是一种常用的软件设计模式，其核心思想是确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。这种模式在很多场景下都非常有用，特别是在需要控制资源访问的情况下。
一、使用场景 配置管理器：当配置信息被整个应用程序共享时，使用单例模式可以确保配置信息只被初始化一次。
连接池：数据库连接池通常使用单例模式，以确保整个应用程序中只有一个连接池实例。
日志记录器：日志记录器通常作为单例实现，以确保所有日志消息都发送到同一个日志文件或日志系统中。
硬件接口：如打印机、扫描仪等硬件设备的控制，通常只允许一个实例与硬件交互。
线程池：线程池管理线程的创建和销毁，使用单例模式可以避免创建过多的线程。 二、优点 节省资源：由于只创建一个实例，可以节省内存和系统资源。
控制访问：可以严格控制对实例的访问，确保实例的线程安全和数据的一致性。
简化代码：通过全局访问点，可以简化代码，避免在多个地方创建实例。
三、缺点 全局状态：单例模式创建了一个全局访问点，可能导致代码间的耦合性增加，使得代码维护和测试变得更加困难。
扩展性问题：单例模式的核心是全局只有一个实例。如果未来需要扩展为多个实例，或者需要支持多种类型的单例，单例模式可能需要重构。
单点故障：如果单例对象是系统中的关键组件，它的失败可能会导致整个系统的故障。
难以单元测试：单例模式的全局状态使得单元测试变得复杂，因为测试代码可能会相互干扰，或者需要在每个测试用例中重置单例状态。
四、实现方式 实现单例模式时，常见的有懒汉式（延迟加载）、饿汉式（预先加载）、双重检查锁定（Double-Checked Locking）等，这里主要用 Golang 来实现。
1. 懒汉式 懒汉式单例模式在第一次被使用时才创建实例。这种方式的好处是只有在需要时才创建实例，节省资源。缺点是每次访问都需要检查实例是否已经被创建，可能会影响性能。
此外，懒汉式在多线程环境下需要特别注意线程安全问题，比如，在多线程环境中，如果两个线程同时检查到实例未被创建，并且都去创建实例，就会创建多个实例，违反了单例模式的原则，于是就有了双重检查锁定的优化实现。
package singleton // Singleton 结构体定义 type Singleton struct{} // instance …  </content></entry><entry><title>车辆激活（扫码激活）的实现</title><url>/post/system/vehicle-active/</url><categories><category>系统设计</category></categories><tags/><content type="html"><![CDATA[  一、业务场景 车辆激活是在车端大屏幕上生成一个二维码，车主使用App进行扫码，点击“确认激活”，车端收到指令后，由相应的模块（一般是CDC）进行本地激活。
二、激活流程图 sequenceDiagram participant Car as 车端 participant Cloud as 云端 participant MQTT as MQTT网关 participant OwnerApp as 车主App Car-&gt;&gt;Cloud: 1.1 请求生成二维码ID Cloud-&gt;&gt;MQTT: 1.2 通过MQTT下发二维码ID MQTT-&gt;&gt;Car: 1.3 接收二维码ID Car-&gt;&gt;Car: 1.4 生成二维码并显示在大屏幕上 OwnerApp-&gt;&gt;Car: 2.1 扫描二维码，获取二维码ID OwnerApp-&gt;&gt;Cloud: 2.2 将二维码ID发给云端 Cloud-&gt;&gt;Cloud: 2.3 将二维码状态更新为“已扫描” OwnerApp-&gt;&gt;OwnerApp: 2.4 显示“确认激活”按钮 OwnerApp-&gt;&gt;Cloud: 3.1 点击“确认激活”，发送激活指令 Cloud-&gt;&gt;Cloud: 3.2 将二维码状态更新为“已确认” Cloud-&gt;&gt;MQTT: 3.3 通过MQTT下发激活指令 MQTT-&gt;&gt;Car: 3.4 下发激活指令 Car-&gt;&gt;Car: 4.1 车端CDC接收指令并进行本地激活 三、激活流程 3.1 车端生成二维码 该阶段是车端跟云端的交互过程。
用户提车后，打开车端大屏幕，发起激活请求，云端在接收到这一请求时，会生成一个唯一的二维码ID，并将该ID转化为Base64编码的字符串，通过MQTT下发给车端。 该二维码ID一定是唯一的，后续流程会将二维码ID跟车辆ID绑定，用于后续操作的校验。 车端会启动一个定时器，轮询查询二维码是否被扫描，如果未被App扫描，隔一段时间二维码会自动刷新。 3.2 App扫描二维码 该阶段是客户端跟云端的交互过程。
App扫描二维码，解析出二维码ID，将二维码ID作为参数发送给云端。 云端接到请求后，会通过二维码 ID 查找Redis缓存进行校验，校验通过后，将二维码状态更新为“已扫描”。 App接收到扫码请求成功的结果后，会跳转到激活页面，请车主在手机App端确认激活。 3.3 App确认激活 该阶段是客户 …  ]]></content></entry><entry><title>Go的定时器之Time.Ticker</title><url>/post/golang/time-ticker/</url><categories><category>Golang</category></categories><tags><tag>Golang</tag></tags><content type="html"><![CDATA[  一、引子 面试官问了一道题：每秒钟调用一次proc并保证程序不退出。
package main func main() { } func proc() { panic(&amp;#34;ok&amp;#34;) } 这道题考察的知识点主要有：
定时执行任务 捕获 panic 错误 这里主要学习、了解 Time.Ticker 的实现，其源代码基于 Go 1.17.9 版本，主要在 src/time/tick.go 文件中，包含了一个结构体和四个函数。
二、Time.Ticker Ticker 是一个周期触发定时的计时器，它会按照一个时间间隔往 channel 发送系统当前时间，而 channel 的接收者可以以固定的时间间隔从 channel 中读取事件。
2.1 结构体 type Ticker struct { C &amp;lt;-chan Time // The channel on which the ticks are delivered. r runtimeTimer } //注：该结构体在src/time/sleep.go中 type runtimeTimer struct { pp uintptr when int64 period int64 f func(any, uintptr) // NOTE: must not be closure arg any seq uintptr nextwhen int64 status uint32 } 可以看到这个结构体包含了一个只读的通道 C，并每隔一段时间向其传递&amp;quot;tick&amp;quot;。
2.2 NewTicker() NewTicker() 主要包含两步：
创建一个 Ticker，主要包括其中的 C 属性和 r 属性。r 属性是 runtimeTimer 类型。
调用 startTimer 函数，启动 Ticker。
如果 d &amp;lt;= 0 会 panic。
func NewTicker(d Duration) *Ticker { if d &amp;lt;= 0 { panic(errors.New(&amp;#34;non-positive interval for NewTicker&amp;#34;)) } c := make(chan Time, 1) t := &amp;amp;Ticker{ C: c, r: …  ]]></content></entry><entry><title>Go的WaitGroup源码分析</title><url>/post/golang/waitgroup-sourcecode/</url><categories><category>Golang</category></categories><tags><tag>Golang</tag><tag>源代码</tag></tags><content type="html">  WaitGroup 是开发中经常用到的并发控制手段，其源代码在 src/sync/waitgroup.go 文件中，定义了 1 个结构体和 4 个方法：
WaitGroup{}：结构体。 state()：内部方法，在 Add()、Wait() 中调用。 Add()：添加任务数、改变任务数。 Done()：完成任务，其实就是 Add(-1)。 Wait()：阻塞等待所有任务的完成。 以下源代码基于 Go 1.17.5 版本，有删减。
$ go version go version go1.17.5 darwin/amd64 在学习之前可以先了解一些概念：
结构体对齐相关的内容，可参考 之前的笔记 。 信号量函数有两个： runtime_Semacquire 表示增加一个信号量，并挂起当前 goroutine。在 Wait() 里用到。 runtime_Semrelease 表示减少一个信号量，并唤醒 sema 上其中一个正在等待的 goroutine。在 Add() 里用到。 unsafe.Pointer 用于各种指针相互转换； uintptr 是 golang 的内置类型，能存储指针的整型，其底层类型是 int，可以和 unsafe.Pointer 相互转换。 一、结构体 1.1 state1 数组的组成 type WaitGroup struct { // 表示 `WaitGroup` 是不可复制的，只能用指针传递，保证全局唯一。 noCopy noCopy // state1 = state（*unit64） + sema（*unit32） // state = counter + waiter state1 [3]uint32 } state1 是一个 uint32 数组，包含了counter 总数、waiter 等待数 和 sema 信号量，其中：
counter：通过 Add() 设置的子 goroutine 的计数值。 waiter：通过 Wait() 陷入阻塞的 waiter 数。 sema：信号量。 1.2 state 和 sema 的位置 实际上，counter 和 waiter 合在一起，当成一个 64 位的整数来使用，所以 state1 数组又可以看成由 *unit64 的 state 和 *unit32 的 sema 组成，即：
state1 …  </content></entry><entry><title>Go的Select的用法</title><url>/post/golang/select/</url><categories><category>Golang</category></categories><tags><tag>Golang</tag></tags><content type="html"><![CDATA[  Go 的通道有两种操作方式，一种是带 range 子句的 for 语句，另一种则是 select 语句，它是专门为了操作通道而存在的。这里主要介绍 select 的用法。
一、select的语法 select 语句的语法如下：
select { case &amp;lt;-ch1 : statement(s) case ch2 &amp;lt;- 1 : statement(s) … default : /* 可选 */ statement(s) } 这里要注意：
每个 case 都必须是一个通信。 由于 select 语句是专为通道设计的，所以每个 case 表达式中都只能包含操作通道的表达式，比如接收表达式。 如果有多个 case 都可以运行，select 会随机公平地选出一个执行，其他不会执行。 如果多个 case 都不能运行，若有 default 子句，则执行该语句，反之，select 将阻塞，直到某个 case 可以运行。 所有 channel 表达式都会被求值。 用一个简单示例看一下：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) func main() { // 准备好几个通道。 intChannels := [5]chan int{ make(chan int, 1), make(chan int, 1), make(chan int, 1), make(chan int, 1), make(chan int, 1) } // 随机选择一个通道，并向它发送元素值。 index := rand.Intn(5) fmt.Printf(&amp;#34;The index: %d\n&amp;#34;, index) intChannels[index] &amp;lt;- index // 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。 select { case &amp;lt;-intChannels[0]: fmt.Println(&amp;#34;The first candidate case is selected.&amp;#34;) case &amp;lt;-intChannels[1]: fmt.Println(&amp;#34;The second candidate case is selected.&amp;#34;) case elem …  ]]></content></entry><entry><title>Go的Channel发送和接收</title><url>/post/golang/channel/</url><categories><category>Golang</category></categories><tags><tag>Golang</tag><tag>源代码</tag></tags><content type="html"><![CDATA[  先来看一道面试题：
对已经关闭的 chan 进行读写，会怎么样？为什么？ 在上一篇学习 Go 协程的文章中，知道 go 关键字可以用来开启一个 goroutine 进行任务处理，但多个任务之间如果需要通信，就需要用到通道（channel）了。
一、Channel的定义 声明并初始化一个通道，可以使用 Go 语言的内建函数 make，同时指定该通道类型的元素类型，下面声明了一个 chan int 类型的 channel:
ch := make(chan int) 二、Channel的操作 发送（写）：发送操作包括了“复制元素值”和“放置副本到通道内部”这两个步骤。即：进入通道的并不是操作符右边的那个元素值，而是它的副本。
ch := make(chan int) // write to channel ch &amp;lt;- x 接收（读）：接收操作包含了“复制通道内的元素值”、“放置副本到接收方”、“删掉原值”三个步骤。
ch := make(chan int) // read from channel x &amp;lt;- ch // another way to read x = &amp;lt;- ch 关闭：关闭 channel 会产生一个广播机制，所有向 channel 读取消息的 goroutine 都会收到消息。
ch := make(chan int) close(ch) 从一个已关闭的 channel 中读取消息永远不会阻塞，并且会返回一个为 false 的 ok-idiom，可以用它来判断 channel 是否关闭：
v, ok := &amp;lt;-ch 如果 ok 是false，表明接收的 v 是产生的零值，这个 channel 被关闭了或者为空。
三、Channel发送和接收操作的特点 一个通道相当于一个先进先出（FIFO）的队列：也就是说，通道中的各个元素值都是严格地按照发送的顺序排列的，先被发送通道的元素值一定会先被接收。
对于同一个通道，发送操作之间和接收操作之间是互斥的：同一时刻，对同一通道发送多个元素，直到这个元素值被完全复制进该通道之后，其他针对该通道的发送操作才可能被执行。接收也是如此。
发送操作和接收操作中，对元素值的处理是不可分割的：前面我们知道发送一个值到通道，是先复制值，再将该副本移动到通道内部，“不可分割”指的是发送操作要么还没复制元素值，要 …  ]]></content></entry><entry><title>Go的Waitgroup和锁</title><url>/post/golang/waitgroup/</url><categories><category>Golang</category></categories><tags><tag>Golang</tag><tag>源代码</tag></tags><content type="html"><![CDATA[  学 Go 的时候知道 Go 语言支持并发，最简单的方法是通过 go 关键字开启 goroutine 即可。可在工作中，用的是 sync 包的 WaitGroup，然而这样还不够，当多个 goroutine 同时访问一个变量时，还要考虑如何保证这些 goroutine 之间不会相互影响，这就又使用到了 sync 的 Mutex。
一、Goroutinue 先说 goroutine，我们都知道它是 Go 中的轻量级线程。Go 程序从 main 包的 main() 函数开始，在程序启动时，Go 程序就会为 main() 函数创建一个默认的 goroutine。使用 goroutine，使用关键字 go 即可。
package main import ( &amp;#34;fmt&amp;#34; ) func main() { // 并发执行程序 go running() } func running() { fmt.Println(&amp;#34;Goroutine&amp;#34;) } 执行代码会发现没有我们预期的“Goroutine”输出，这是因为当前的程序是一个单线程的程序，main 函数只要执行后，就不会再管其他线程在做什么事情，程序就自动退出了。解决办法是加一个 sleep 函数，让 main 函数等待 running 函数执行完毕后再退出。我们假设 running 函数里的代码执行需要 2 秒，因此让 main 函数等待 3 秒再退出。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { // 并发执行程序 go running() time.Sleep(3 * time.Second) } func running() { fmt.Println(&amp;#34;Goroutine&amp;#34;) } 再次执行代码，终端输出了我们想要的“Goroutine”字符串。
二、WaitGroup 上面我们是假设了 running 函数执行需要 2 秒，可如果执行需要 10 秒甚至更长时间，不知道 goroutin 什么时候结束，难道还要 main 函数 sleep 更多的秒数吗？就不能让 running 函数执行完去通知 main 函数，main 函数收到信号自动退出吗？还真可以！可以使用 sync …  ]]></content></entry><entry><title>归档</title><url>/archives/archives/</url><categories/><tags/><content type="html">    </content></entry></search>