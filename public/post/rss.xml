<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 呦呦鹿鸣</title><link>//localhost:1313/post/</link><description>Recent content in Posts on 呦呦鹿鸣</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Tue, 03 Jan 2023 18:10:45 +0800</lastBuildDate><atom:link href="//localhost:1313/post/rss.xml" rel="self" type="application/rss+xml"/><item><title>13种缓存模式汇总</title><link>//localhost:1313/post/cache/caching-patterns/</link><pubDate>Tue, 03 Jan 2023 18:10:45 +0800</pubDate><guid>//localhost:1313/post/cache/caching-patterns/</guid><description>&lt;p>学习和总结了13种缓存模式的优缺点、应用场景和工作流程。（汇总见底部的思维导图）&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>缓存模式&lt;/th>
 &lt;th>读取流程&lt;/th>
 &lt;th>更新流程&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Cache-Aside（旁路缓存）&lt;/td>
 &lt;td>命中：返回缓存数据；未命中：从数据库加载数据并缓存后返回&lt;/td>
 &lt;td>先更新数据库，然后更新或删除缓存中的数据&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Read-Through（透读缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Write-Through（透写缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Write-Through with Expiry（带过期的透写缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Read-Write（读写缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Write-Back/Write-Behind（写后缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>写入数据到缓存，然后异步写入数据库&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Write-Around（写绕过缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>直接更新数据库，可选更新缓存&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Lazy Write-Back（懒写后缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>写入数据到缓存，缓存批量异步写数据库&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Timed Write-Back（定时写后缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>写入数据到缓存，缓存定时写入数据库&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Write-Back with Coalescing（合并写后缓存）&lt;/td>
 &lt;td>同上&lt;/td>
 &lt;td>写入数据到缓存，缓存合并后写入数据库&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Cache-Only（仅缓存）&lt;/td>
 &lt;td>命中：返回缓存数据；未命中：从缓存的其他节点尝试获取数据&lt;/td>
 &lt;td>更新缓存&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Hybrid Cache（混合缓存）&lt;/td>
 &lt;td>读取流程和更新流程根据组合的具体缓存模式而定&lt;/td>
 &lt;td>读取流程和更新流程根据组合的具体缓存模式而定&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Adaptive Caching（自适应缓存）&lt;/td>
 &lt;td>读取流程和更新流程根据访问模式动态调整缓存策略&lt;/td>
 &lt;td>读取流程和更新流程根据访问模式动态调整缓存策略&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;div class="mermaid" align="center" style="background: #white" > 
 
graph LR
A[1. Cache-Aside 旁路缓存] -->|定义| B_def[应用程序直接管理缓存的读取和写入]
A -->|优点| C_adv[灵活、减少数据库负载、简单易于实现]
A -->|缺点| D_dis[需要手动管理缓存、存在缓存一致性问题]
A -->|应用场景| E_sce[读取频繁但更新较少的数据]
A -->|读取流程| F_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A -->|更新流程| G_up[更新数据库后更新或删除缓存]

A1[2. Read-Through 透读缓存] -->|定义| H_def[缓存层自动管理数据的读取]
A1 -->|优点| I_adv[简化应用程序逻辑、减少数据库负担]
A1 -->|缺点| J_dis[增加对缓存层依赖、缓存未命中时增加负载]
A1 -->|应用场景| K_sce[需要快速访问且能容忍一定程度缓存一致性问题]
A1 -->|读取流程| L_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A1 -->|更新流程| M_up[更新数据库后同步更新缓存]

A2[3. Write-Through 透写缓存] -->|定义| N_def[数据写入时同时更新缓存和数据库]
A2 -->|优点| O_adv[保证缓存和数据库数据一致性]
A2 -->|缺点| P_dis[写操作增加负担、可能影响性能]
A2 -->|应用场景| Q_sce[数据一致性要求高的场景]
A2 -->|读取流程| R_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A2 -->|更新流程| S_up[写入数据到缓存并同步写入数据库]

A3[4. Write-Back/Write-Behind 写后缓存] -->|定义| T_def[数据先写入缓存，然后异步写入数据库]
A3 -->|优点| U_adv[提高写操作性能、减少数据库写入压力]
A3 -->|缺点| V_dis[需要处理数据同步问题、可能导致数据丢失]
A3 -->|应用场景| W_sce[不需要即时写入数据库的场景]
A3 -->|读取流程| X_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A3 -->|更新流程| Y_up[写入数据到缓存并异步写入数据库]

A4[5. Write-Around 写绕过缓存] -->|定义| Z_def[写操作直接写入数据库，而不是写入缓存]
A4 -->|优点| AA_adv[减少缓存层负担]
A4 -->|缺点| AB_dis[缓存数据可能过时]
A4 -->|应用场景| AC_sce[数据收集或审计日志]
A4 -->|读取流程| AD_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A4 -->|更新流程| AE_up[直接更新数据库，可选更新缓存]

A5[6. Write-Through with Expiry 带过期的透写缓存] -->|定义| AF_def[透写缓存的变种，缓存中的数据会设置过期时间]
A5 -->|优点| AG_adv[数据一致性较好]
A5 -->|缺点| AH_dis[需要处理数据过期和重新加载]
A5 -->|应用场景| AI_sce[配置信息、静态资源]
A5 -->|读取流程| AJ_rd[命中且未过期：返回缓存数据&lt;br>未命中或已过期：从数据库加载并缓存后返回]
A5 -->|更新流程| AK_up[写入数据到缓存并同步写入数据库]

A6[7. Lazy Write-Back 懒写后缓存] -->|定义| AL_def[写后缓存的变种，不会立即将数据异步写入数据库]
A6 -->|优点| AM_adv[减少数据库写入次数]
A6 -->|缺点| AN_dis[数据同步延迟]
A6 -->|应用场景| AO_sce[批量数据处理]
A6 -->|读取流程| AP_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A6 -->|更新流程| AQ_up[写入数据到缓存，缓存批量异步写数据库]

A7[8. Timed Write-Back 定时写后缓存] -->|定义| AR_def[缓存中的数据会在特定的时间间隔后被写入数据库]
A7 -->|优点| AS_adv[减少即时写入压力]
A7 -->|缺点| AT_dis[数据同步延迟]
A7 -->|应用场景| AU_sce[定时备份或数据同步]
A7 -->|读取流程| AV_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A7 -->|更新流程| AW_up[写入数据到缓存，缓存定时写入数据库]

A8[9. Write-Back with Coalescing 合并写后缓存] -->|定义| AX_def[多个写操作可能会被合并为单个写入操作]
A8 -->|优点| AY_adv[减少数据库写入次数]
A8 -->|缺点| AZ_dis[需要复杂的合并逻辑]
A8 -->|应用场景| BA_sce[频繁更新的配置信息]
A8 -->|读取流程| BB_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A8 -->|更新流程| BC_up[写入数据到缓存，缓存合并后写入数据库]

A9[10. Read-Write 读写缓存] -->|定义| BD_def[缓存既处理读操作也处理写操作]
A9 -->|优点| BE_adv[读写操作都从缓存中进行]
A9 -->|缺点| BF_dis[缓存失效时影响性能]
A9 -->|应用场景| BG_sce[实时数据监控]
A9 -->|读取流程| BH_rd[命中：返回缓存数据&lt;br>未命中：从数据库加载并缓存后返回]
A9 -->|更新流程| BI_up[更新缓存后同步更新数据库]

A10[11. Cache-Only 仅缓存] -->|定义| BK_def[所有的数据访问都通过缓存进行]
A10 -->|优点| BL_adv[快速的数据访问]
A10 -->|缺点| BM_dis[数据一致性难以保证]
A10 -->|应用场景| BN_sce[静态内容分发]
A10 -->|读取流程| BO_rd[命中：返回缓存数据&lt;br>未命中：从缓存的其他节点尝试获取数据]
A10 -->|更新流程| BP_up[更新缓存]

A11[12. Hybrid Cache 混合缓存] -->|定义| BQ_def[结合多种缓存模式]
A11 -->|优点| BR_adv[适应不同的数据访问模式和业务需求]
A11 -->|缺点| BS_dis[实现复杂]
A11 -->|应用场景| BT_sce[电商网站]
A11 -->|读取流程| BU_rd[根据组合的具体缓存模式而定]
A11 -->|更新流程| BV_up[根据组合的具体缓存模式而定]

A12[13. Adaptive Caching 自适应缓存] -->|定义| BW_def[缓存策略会根据当前的访问模式和系统负载动态调整]
A12 -->|优点| BX_adv[优化性能和资源利用率]
A12 -->|缺点| BY_dis[实现复杂]
A12 -->|应用场景| BZ_sce[动态网站内容]
A12 -->|读取流程| CA_rd[根据访问模式动态调整缓存策略]
A12 -->|更新流程| CB_up[根据访问模式动态调整缓存策略]

&lt;/div></description></item><item><title>认识MQTT（三）：MQTT在业务中的应用</title><link>//localhost:1313/post/mq/use-mqtt/</link><pubDate>Sat, 31 Dec 2022 17:10:20 +0800</pubDate><guid>//localhost:1313/post/mq/use-mqtt/</guid><description>&lt;p>我们的系统连接着车辆和用户两端，车辆的个性化配置数据上报到云端，又或者用户登录后的账户信息下发给车端，车辆与云端之间的数据传输都是通过MQTT网关来实现的。
网关作为网络中间连接器、协议转换器，负责将车辆终端、众多业务后台复杂的网络连接场景、业务交互场景进行聚类转发。&lt;/p></description></item><item><title>Golang实现工厂模式（Factory Pattern）</title><link>//localhost:1313/post/desiginpattern/factory-pattern/</link><pubDate>Wed, 21 Dec 2022 12:52:01 +0800</pubDate><guid>//localhost:1313/post/desiginpattern/factory-pattern/</guid><description>&lt;p>工厂模式（Factory Pattern）是一种创建型设计模式，用于处理对象的创建。在工厂模式中，创建对象的任务被推迟到子类中，这些子类被称为工厂方法。这种模式的主要目的是将对象的创建和使用分离，使得在不知道具体类的情况下也能创建对象。&lt;/p></description></item><item><title>认识MQTT（二）：RabbitMQ支持MQTT</title><link>//localhost:1313/post/mq/rabbitmq-support-mqtt/</link><pubDate>Thu, 15 Dec 2022 16:00:20 +0800</pubDate><guid>//localhost:1313/post/mq/rabbitmq-support-mqtt/</guid><description>&lt;p>&lt;code>RabbitMQ&lt;/code>是通过插件的形式支持&lt;code>MQTT&lt;/code>协议的，使用时，需要在RabbitMQ集群上启用&lt;code>rabbitmq_mqtt&lt;/code>插件。&lt;/p>
&lt;h2 id="一如何配置rabbitmq以支持mqtt的qos级别">一、如何配置RabbitMQ以支持MQTT的QoS级别
&lt;a class="header-anchor" href="#%e4%b8%80%e5%a6%82%e4%bd%95%e9%85%8d%e7%bd%aerabbitmq%e4%bb%a5%e6%94%af%e6%8c%81mqtt%e7%9a%84qos%e7%ba%a7%e5%88%ab">&lt;/a>
&lt;/h2>&lt;p>&lt;code>MQTT&lt;/code> QoS级别在&lt;code>RabbitMQ&lt;/code>中不需要特别的配置，因为&lt;code>rabbitmq_mqtt&lt;/code>插件会自动处理QoS级别。&lt;code>MQTT&lt;/code>客户端在发布消息时指定QoS级别，&lt;code>RabbitMQ&lt;/code>会根据这个级别处理消息。&lt;/p></description></item><item><title>认识MQTT（一）：MQTT是什么</title><link>//localhost:1313/post/mq/mqtt-introduction/</link><pubDate>Wed, 07 Dec 2022 21:00:20 +0800</pubDate><guid>//localhost:1313/post/mq/mqtt-introduction/</guid><description>&lt;p>和车打交道后，接触到了&lt;code>MQTT&lt;/code>，第一次听到这个词时，我还疑心自己是不是听错了，问Leader是不是&lt;code>MQ&lt;/code>，得到了“不是”的答复，遂有此文，总结一下我所了解的&lt;code>MQTT&lt;/code>。&lt;/p></description></item><item><title>用Golang实现一个消息队列</title><link>//localhost:1313/post/golang/implement-queue/</link><pubDate>Sun, 04 Dec 2022 20:00:20 +0800</pubDate><guid>//localhost:1313/post/golang/implement-queue/</guid><description>&lt;p>Go的&lt;code>channel&lt;/code>是并发编程中的一种同步通信机制，天然支持并发请求，因此可以用来实现消息队列。这里实现一个能够处理并发请求的消息队列。&lt;/p>
&lt;h3 id="一设计消息队列的基本结构">一、设计消息队列的基本结构
&lt;a class="header-anchor" href="#%e4%b8%80%e8%ae%be%e8%ae%a1%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%93%e6%9e%84">&lt;/a>
&lt;/h3>&lt;p>定义一个&lt;code>Message&lt;/code>结构体来存储消息的ID和负载，一个&lt;code>Queue&lt;/code>结构体来管理消息队列。&lt;/p></description></item><item><title>Golang实现单例模式（Singleton Pattern）</title><link>//localhost:1313/post/desiginpattern/singleton-pattern/</link><pubDate>Wed, 30 Nov 2022 14:52:01 +0800</pubDate><guid>//localhost:1313/post/desiginpattern/singleton-pattern/</guid><description>&lt;p>单例模式（Singleton Pattern）是一种常用的软件设计模式，其核心思想是确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。这种模式在很多场景下都非常有用，特别是在需要控制资源访问的情况下。&lt;/p></description></item><item><title>车辆激活（扫码激活）的实现</title><link>//localhost:1313/post/system/vehicle-active/</link><pubDate>Mon, 28 Nov 2022 20:37:58 +0800</pubDate><guid>//localhost:1313/post/system/vehicle-active/</guid><description>&lt;h3 id="一业务场景">一、业务场景
&lt;a class="header-anchor" href="#%e4%b8%80%e4%b8%9a%e5%8a%a1%e5%9c%ba%e6%99%af">&lt;/a>
&lt;/h3>&lt;p>车辆激活是在车端大屏幕上生成一个二维码，车主使用App进行扫码，点击“确认激活”，车端收到指令后，由相应的模块（一般是CDC）进行本地激活。&lt;/p></description></item><item><title>Go的定时器之Time.Ticker</title><link>//localhost:1313/post/golang/time-ticker/</link><pubDate>Fri, 22 Apr 2022 22:47:20 +0800</pubDate><guid>//localhost:1313/post/golang/time-ticker/</guid><description>&lt;h3 id="一引子">一、引子
&lt;a class="header-anchor" href="#%e4%b8%80%e5%bc%95%e5%ad%90">&lt;/a>
&lt;/h3>&lt;p>面试官问了一道题：每秒钟调用一次proc并保证程序不退出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">proc&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;ok&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这道题考察的知识点主要有：&lt;/p>
&lt;ol>
&lt;li>定时执行任务&lt;/li>
&lt;li>捕获 &lt;code>panic&lt;/code> 错误&lt;/li>
&lt;/ol>
&lt;p>这里主要学习、了解 &lt;code>Time.Ticker&lt;/code> 的实现，其源代码基于 &lt;code>Go 1.17.9&lt;/code> 版本，主要在 &lt;code>src/time/tick.go&lt;/code> 文件中，包含了一个结构体和四个函数。&lt;/p></description></item><item><title>Go的WaitGroup源码分析</title><link>//localhost:1313/post/golang/waitgroup-sourcecode/</link><pubDate>Fri, 01 Apr 2022 09:00:20 +0800</pubDate><guid>//localhost:1313/post/golang/waitgroup-sourcecode/</guid><description>&lt;p>&lt;code>WaitGroup&lt;/code> 是开发中经常用到的并发控制手段，其源代码在 &lt;code>src/sync/waitgroup.go&lt;/code> 文件中，定义了 1 个结构体和 4 个方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>WaitGroup{}&lt;/code>&lt;/strong>：结构体。&lt;/li>
&lt;li>&lt;strong>&lt;code>state()&lt;/code>&lt;/strong>：内部方法，在 &lt;code>Add()&lt;/code>、&lt;code>Wait()&lt;/code> 中调用。&lt;/li>
&lt;li>&lt;strong>&lt;code>Add()&lt;/code>&lt;/strong>：添加任务数、改变任务数。&lt;/li>
&lt;li>&lt;strong>&lt;code>Done()&lt;/code>&lt;/strong>：完成任务，其实就是 &lt;code>Add(-1)&lt;/code>。&lt;/li>
&lt;li>&lt;strong>&lt;code>Wait()&lt;/code>&lt;/strong>：阻塞等待所有任务的完成。&lt;/li>
&lt;/ul>
&lt;p>以下源代码基于 &lt;code>Go 1.17.5&lt;/code> 版本，有删减。&lt;/p></description></item><item><title>Go的Select的用法</title><link>//localhost:1313/post/golang/select/</link><pubDate>Sun, 10 Oct 2021 23:52:00 +0800</pubDate><guid>//localhost:1313/post/golang/select/</guid><description>&lt;p>Go 的通道有两种操作方式，一种是带 range 子句的 for 语句，另一种则是 select 语句，它是专门为了操作通道而存在的。这里主要介绍 select 的用法。&lt;/p>
&lt;h5 id="一select的语法">一、select的语法
&lt;a class="header-anchor" href="#%e4%b8%80select%e7%9a%84%e8%af%ad%e6%b3%95">&lt;/a>
&lt;/h5>&lt;p>select 语句的语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ch1&lt;/span> :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">statement&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">ch2&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">statement&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span> : &lt;span style="color:#75715e">/* 可选 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">statement&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里要注意：&lt;/p></description></item><item><title>Go的Channel发送和接收</title><link>//localhost:1313/post/golang/channel/</link><pubDate>Tue, 24 Aug 2021 01:46:00 +0800</pubDate><guid>//localhost:1313/post/golang/channel/</guid><description>&lt;p>先来看一道面试题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>对已经关闭的 chan 进行读写，会怎么样？为什么？
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上一篇学习 Go 协程的文章中，知道 go 关键字可以用来开启一个 goroutine 进行任务处理，但多个任务之间如果需要通信，就需要用到通道（channel）了。&lt;/p></description></item><item><title>Go的Waitgroup和锁</title><link>//localhost:1313/post/golang/waitgroup/</link><pubDate>Tue, 18 May 2021 00:13:00 +0800</pubDate><guid>//localhost:1313/post/golang/waitgroup/</guid><description>&lt;p>学 Go 的时候知道 Go 语言支持并发，最简单的方法是通过 go 关键字开启 goroutine 即可。可在工作中，用的是 sync 包的 WaitGroup，然而这样还不够，当多个 goroutine 同时访问一个变量时，还要考虑如何保证这些 goroutine 之间不会相互影响，这就又使用到了 sync 的 Mutex。&lt;/p></description></item></channel></rss>