<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 呦呦鹿鸣</title><link>//localhost:1313/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on 呦呦鹿鸣</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 21 Dec 2022 12:52:01 +0800</lastBuildDate><atom:link href="//localhost:1313/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/rss.xml" rel="self" type="application/rss+xml"/><item><title>Golang实现工厂模式（Factory Pattern）</title><link>//localhost:1313/post/desiginpattern/factory-pattern/</link><pubDate>Wed, 21 Dec 2022 12:52:01 +0800</pubDate><guid>//localhost:1313/post/desiginpattern/factory-pattern/</guid><description>&lt;p>工厂模式（Factory Pattern）是一种创建型设计模式，用于处理对象的创建。在工厂模式中，创建对象的任务被推迟到子类中，这些子类被称为工厂方法。这种模式的主要目的是将对象的创建和使用分离，使得在不知道具体类的情况下也能创建对象。&lt;/p></description></item><item><title>Golang实现观察者模式（Observer Pattern）</title><link>//localhost:1313/post/desiginpattern/observer-pattern/</link><pubDate>Wed, 21 Dec 2022 12:52:01 +0800</pubDate><guid>//localhost:1313/post/desiginpattern/observer-pattern/</guid><description>&lt;p>观察者模式是一种行为型设计模式，它定义了对象间的一种一对多的依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象都会得到通知并自动更新。这种模式也被称为发布-订阅模式、模型-视图模式、源-监听器模式。&lt;/p></description></item><item><title>Golang实现单例模式（Singleton Pattern）</title><link>//localhost:1313/post/desiginpattern/singleton-pattern/</link><pubDate>Wed, 30 Nov 2022 14:52:01 +0800</pubDate><guid>//localhost:1313/post/desiginpattern/singleton-pattern/</guid><description>&lt;p>单例模式（Singleton Pattern）是一种常用的软件设计模式，其核心思想是确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。这种模式在很多场景下都非常有用，特别是在需要控制资源访问的情况下。&lt;/p></description></item></channel></rss>